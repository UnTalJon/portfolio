<script>
    // @ts-nocheck
    import gsap from "gsap";
    import { SplitText } from "gsap/SplitText";
    import "@fontsource-variable/sometype-mono";

    gsap.registerPlugin(SplitText);

    document.fonts.ready.then(() => {
        function createSplitTexts(elements) {
            const splits = {};

            elements.forEach(({ key, selector, type }) => {
                const config = { type, mask: type };

                if (type === "chars") config.charsClass = "char";
                if (type === "lines") config.linesClass = "line";

                splits[key] = SplitText.create(selector, config);
            });

            return splits;
        }
        // Funci贸n para animar la transformaci贸n del logo
        function animateLogoTransformation() {
            const letters = document.querySelectorAll(
                ".preloader-logo .letter",
            );
            const tl = gsap.timeline();

            // Primer paso: mostrar las letras ocultas con scale y opacity
            tl.to(".preloader-logo .letter.hidden", {
                opacity: 1,
                scale: 1,
                rotationY: 0,
                duration: 0.8,
                stagger: 0.1,
                ease: "back.out(1.7)",
            });

            // Segundo paso: transformar cada letra a su forma final
            letters.forEach((letter, index) => {
                const finalLetter = letter.dataset.final;

                tl.to(
                    letter,
                    {
                        duration: 0.6,
                        ease: "power2.inOut",
                        onStart: () => {
                            // Crear un efecto de morphing/transformaci贸n
                            letter.style.transform = "rotateY(90deg)";
                        },
                        onComplete: () => {
                            // Cambiar el contenido de la letra
                            letter.textContent = finalLetter;
                            // Restaurar la transformaci贸n
                            gsap.set(letter, { rotationY: 0, scale: 1 });
                        },
                    },
                    index * 0.1 + 0.5,
                ); // Desfase para cada letra
            });

            return tl;
        }
        const splitElements = [
            { key: "logoChars", selector: ".preloader-logo h1", type: "chars" },
            {
                key: "footerLines",
                selector: ".preloader-footer p",
                type: "lines",
            },
            { key: "headerChars", selector: ".header h1", type: "chars" },
            { key: "heroFooterH3", selector: ".hero-footer h3", type: "lines" },
            { key: "heroFooterP", selector: ".hero-footer p", type: "lines" },
            { key: "btnLabels", selector: ".btn-label span", type: "lines" },
        ];

        const splits = createSplitTexts(splitElements);

        gsap.set([splits.logoChars.chars], { x: "100%" });
        gsap.set(
            [
                splits.footerLines.lines,
                splits.headerChars.chars,
                splits.heroFooterH3.lines,
                splits.heroFooterP.lines,
                splits.btnLabels.lines,
            ],
            { y: "100%" },
        );

        gsap.set(".btn-icon", { clipPath: "circle(0% at 50% 50%)" });
        gsap.set(".btn", { scale: 0 });

        function animateProgress(duration = 4) {
            const tl = gsap.timeline();
            const counterSteps = 5;
            let currentProgress = 0;

            for (let i = 0; i < counterSteps; i++) {
                const finalStep = i === counterSteps - 1;
                const targerProgress = finalStep
                    ? 1
                    : Math.min(
                          currentProgress + Math.random() * 0.3 + 0.1,
                          0.9,
                      );
                currentProgress = targerProgress;

                tl.to(".preloader-progress-bar", {
                    scaleX: targerProgress,
                    duration: duration / counterSteps,
                    ease: "power2.out",
                });
            }

            return tl;
        }

        const tl = gsap.timeline({ delay: 0.5 });

        tl.to(splits.logoChars.chars, {
            x: "0%",
            stagger: 0.05,
            duration: 1,
            ease: "power4.inOut",
        })
            .to(
                splits.footerLines.lines,
                {
                    y: "0%",
                    stagger: 0.1,
                    duration: 1,
                    ease: "power4.inOut",
                },
                "0.25",
            )
            .add(animateLogoTransformation())
            .add(animateProgress(), "<")
            .set(".preloader-progress", { backgroundColor: "var(--base-300)" })
            .to(
                splits.logoChars.chars,
                {
                    x: "-100%",
                    stagger: 0.05,
                    duration: 1,
                    ease: "power4.inOut",
                },
                "-=0.5",
            )
            .to(
                splits.footerLines.lines,
                {
                    y: "-100%",
                    stagger: 0.1,
                    duration: 1,
                    ease: "power4.inOut",
                },
                "<",
            )
            .to(".preloader-progress", {
                opacity: 0,
                duration: 0.5,
                ease: "power3.out",
            })
            .to(
                ".preloader-mask",
                {
                    scale: 5,
                    duration: 2.5,
                    ease: "power3.out",
                },
                "<",
            )
            .to(
                ".hero-img",
                {
                    scale: 1,
                    duration: 1.5,
                    ease: "power3.out",
                },
                "<",
            )
            .to(splits.headerChars.chars, {
                y: 0,
                stagger: 0.05,
                duration: 1,
                ease: "power4.out",
                delay: -2,
            })
            .to(
                [splits.heroFooterH3.lines, splits.heroFooterP.lines],
                {
                    y: 0,
                    stagger: 0.1,
                    duration: 1,
                    ease: "power4.out",
                },
                "-=1.5",
            )
            .to(
                ".btn",
                {
                    scale: 1,
                    duration: 1,
                    ease: "power4.out",
                    onStart: () => {
                        tl.to(".btn-icon", {
                            clipPath: "circle(100% at 50% 50%)",
                            duration: 1,
                            ease: "power2.out",
                            delay: -1.25,
                        }).to(splits.btnLabels.lines, {
                            y: 0,
                            duration: 1,
                            ease: "power4.out",
                            delay: -1.25,
                        });
                    },
                },
                "<",
            );
    });
</script>
